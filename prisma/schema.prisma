generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified String?
  image         String?
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // custom fields
  stripeCustomerId String?             @unique
  subscriptions    SubscriptionCycle[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Plan {
  id                 String   @id @default(cuid())
  name               PlanType @unique @default(MONTHLY)
  priceCentsUSD      Int
  textTokensIncluded Int
  ttsSecondsIncluded Int
  createdAt          DateTime @default(now())

  cycles SubscriptionCycle[]
}

enum PlanType {
  MONTHLY
  YEARLY
}

model SubscriptionCycle {
  id     String @id @default(cuid())
  userId String
  planId String

  // copy if the plan changes in future
  priceCentsUSD Int
  textLimit     Int
  ttsSecLimit   Int

  amountPaidCents   Int
  periodStart       DateTime
  periodEnd         DateTime
  cancelAtPeriodEnd Boolean     @default(false)
  status            CycleStatus @default(PAID)

  tokensUsed     Int @default(0)
  ttsSecondsUsed Int @default(0)

  // stripe metadata
  stripeInvoiceId String?  @unique
  stripeSubId     String?
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])

  @@index([userId, periodEnd]) // fast access to active subscriptions
  @@index([stripeSubId])
  @@index([status])
}

enum CycleStatus {
  PAID
  FAILED
  REFUNDED
  CANCELED
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
